// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Shallow Snapshot Tests author map 1`] = `
<Fragment>
  <CommonHelmet
    canonicalUrlPath="/"
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={Object {}}
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(100px - 58px)",
            "position": "relative",
            "width": "100px",
          }
        }
      >
        <TriviaMap
          endToSelectPosition={[Function]}
          hiddenMarkerIds={Array []}
          initCenter={
            Object {
              "lat": 1,
              "lng": 1,
            }
          }
          initZoom={1}
          keepMapFocus={true}
          newMarkerMode={false}
          park="S"
          shouldCurrentPositionAsyncWithForm={true}
          userId={1}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "bottom": "auto",
              "left": "auto",
              "margin": 0,
              "position": "fixed",
              "right": 20,
              "top": 108,
              "zIndex": 1000,
            }
          }
        >
          <ParkSelectBox
            onChangePark={[MockFunction]}
            park="S"
          />
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 61,
              "width": "100vw",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(255, 255, 255, 0.9)",
              "borderRadius": 1,
              "bottom": 25,
              "boxSizing": "border-box",
              "left": "auto",
              "margin": 0,
              "maxWidth": 300,
              "pl": 1,
              "position": "fixed",
              "pr": 3,
              "py": 2,
              "right": 20,
              "top": "auto",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            alignItems="center"
            direction="row"
          >
            <ForwardRef(IconButton)
              onClick={[Function]}
            >
              <Memo(ForwardRef(CloseIcon)) />
            </ForwardRef(IconButton)>
            <ForwardRef(Typography)>
              <Link
                to="/users/1"
              >
                name
              </Link>
              さんの投稿
            </ForwardRef(Typography)>
          </ForwardRef(Stack)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <SwipeableEdgeDrawer
      bleedingHeight={56}
      edgeLabel={
        <CloseFormButton
          onClose={[Function]}
        />
      }
      edgeLabelWhenClosed="編集中"
      heightRatio={80}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
      show={false}
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        park="S"
      />
    </SwipeableEdgeDrawer>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;

exports[`Shallow Snapshot Tests basic 1`] = `
<Fragment>
  <CommonHelmet
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={Object {}}
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(100px - 58px)",
            "position": "relative",
            "width": "100px",
          }
        }
      >
        <TriviaMap
          endToSelectPosition={[Function]}
          hiddenMarkerIds={Array []}
          initCenter={
            Object {
              "lat": 1,
              "lng": 1,
            }
          }
          initZoom={1}
          keepMapFocus={true}
          newMarkerMode={false}
          park="S"
          shouldCurrentPositionAsyncWithForm={true}
        />
        <FloatingButton
          color="error"
          disabled={false}
          icon="add-marker"
          onClick={[Function]}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "bottom": "auto",
              "left": "auto",
              "margin": 0,
              "position": "fixed",
              "right": 20,
              "top": 108,
              "zIndex": 1000,
            }
          }
        >
          <ParkSelectBox
            onChangePark={[MockFunction]}
            park="S"
          />
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 61,
              "width": "100vw",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <SwipeableEdgeDrawer
      bleedingHeight={56}
      edgeLabel={
        <CloseFormButton
          onClose={[Function]}
        />
      }
      edgeLabelWhenClosed="編集中"
      heightRatio={80}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
      show={false}
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        park="S"
      />
    </SwipeableEdgeDrawer>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;

exports[`Shallow Snapshot Tests before render map 1`] = `
<Fragment>
  <CommonHelmet
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={Object {}}
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(0px - 58px)",
            "position": "relative",
            "width": "0px",
          }
        }
      >
        <FloatingButton
          color="error"
          disabled={false}
          icon="add-marker"
          onClick={[Function]}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "bottom": "auto",
              "left": "auto",
              "margin": 0,
              "position": "fixed",
              "right": 20,
              "top": 108,
              "zIndex": 1000,
            }
          }
        >
          <ParkSelectBox
            onChangePark={[MockFunction]}
            park="S"
          />
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 61,
              "width": "100vw",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <SwipeableEdgeDrawer
      bleedingHeight={56}
      edgeLabel={
        <CloseFormButton
          onClose={[Function]}
        />
      }
      edgeLabelWhenClosed="編集中"
      heightRatio={80}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
      show={false}
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        park="S"
      />
    </SwipeableEdgeDrawer>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;

exports[`Shallow Snapshot Tests land mode 1`] = `
<Fragment>
  <CommonHelmet
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={Object {}}
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(100px - 58px)",
            "position": "relative",
            "width": "100px",
          }
        }
      >
        <TriviaMap
          endToSelectPosition={[Function]}
          hiddenMarkerIds={Array []}
          initCenter={
            Object {
              "lat": 1,
              "lng": 1,
            }
          }
          initZoom={1}
          keepMapFocus={true}
          newMarkerMode={false}
          park="L"
          shouldCurrentPositionAsyncWithForm={true}
        />
        <FloatingButton
          color="error"
          disabled={false}
          icon="add-marker"
          onClick={[Function]}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "bottom": "auto",
              "left": "auto",
              "margin": 0,
              "position": "fixed",
              "right": 20,
              "top": 108,
              "zIndex": 1000,
            }
          }
        >
          <ParkSelectBox
            onChangePark={[MockFunction]}
            park="L"
          />
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 61,
              "width": "100vw",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <SwipeableEdgeDrawer
      bleedingHeight={56}
      edgeLabel={
        <CloseFormButton
          onClose={[Function]}
        />
      }
      edgeLabelWhenClosed="編集中"
      heightRatio={80}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
      show={false}
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        park="L"
      />
    </SwipeableEdgeDrawer>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;

exports[`Shallow Snapshot Tests park is undefined 1`] = `
<Fragment>
  <CommonHelmet
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={Object {}}
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(100px - 58px)",
            "position": "relative",
            "width": "100px",
          }
        }
      >
        <FloatingButton
          color="error"
          disabled={false}
          icon="add-marker"
          onClick={[Function]}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 61,
              "width": "100vw",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <SwipeableEdgeDrawer
      bleedingHeight={56}
      edgeLabel={
        <CloseFormButton
          onClose={[Function]}
        />
      }
      edgeLabelWhenClosed="編集中"
      heightRatio={80}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
      show={false}
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        park="S"
      />
    </SwipeableEdgeDrawer>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;

exports[`Shallow Snapshot Tests pc view 1`] = `
<Fragment>
  <CommonHelmet
    description="隠れミッキー、バックグラウンドストーリーなど、ディズニーのマニアックな知識をが地図上で共有できるサイト"
    title="トリビアマップ"
  />
  <ForwardRef(Box)
    sx={
      Object {
        "width": "calc(100% - 500px)",
      }
    }
  >
    <GlobalMenu
      mapPage={true}
      topBarPosition="static"
    >
      <ForwardRef(Box)
        sx={
          Object {
            "height": "calc(100px - 66px)",
            "position": "relative",
            "width": "100px",
          }
        }
      >
        <TriviaMap
          endToSelectPosition={[Function]}
          hiddenMarkerIds={Array []}
          initCenter={
            Object {
              "lat": 1,
              "lng": 1,
            }
          }
          initZoom={1}
          keepMapFocus={true}
          newMarkerMode={false}
          park="S"
          shouldCurrentPositionAsyncWithForm={true}
        />
        <FloatingButton
          color="error"
          disabled={false}
          icon="add-marker"
          onClick={[Function]}
        />
        <TriviaMapMarkersLoadingProgressBar />
        <ForwardRef(Box)
          sx={
            Object {
              "bottom": "auto",
              "left": "auto",
              "margin": 0,
              "position": "fixed",
              "right": 520,
              "top": 116,
              "zIndex": 1000,
            }
          }
        >
          <ParkSelectBox
            onChangePark={[MockFunction]}
            park="S"
          />
        </ForwardRef(Box)>
        <ForwardRef(Box)
          sx={
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.5)",
              "display": "flex",
              "margin": 0,
              "position": "fixed",
              "top": 69,
              "width": "calc(100% - 500px)",
              "zIndex": 1000,
            }
          }
        >
          <ForwardRef(Stack)
            direction="row"
            spacing={1}
            sx={
              Object {
                "&::-webkit-scrollbar": Object {
                  "display": "none",
                },
                "borderRight": "2px solid #eeeeee",
                "boxSizing": "border-box",
                "msOverflowStyle": "none",
                "overflowX": "scroll",
                "px": 1,
                "py": 1,
                "scrollbarWidth": "none",
                "whiteSpace": "nowrap",
                "width": "calc(100% - 30px)",
              }
            }
          >
            <RoundButton
              id="category-button-1"
              key="category-button-1"
              onClick={[Function]}
              selected={false}
            >
              隠れミッキー
            </RoundButton>
            <RoundButton
              id="category-button-2"
              key="category-button-2"
              onClick={[Function]}
              selected={false}
            >
              バックグラウンドストーリー
            </RoundButton>
            <RoundButton
              id="category-button-3"
              key="category-button-3"
              onClick={[Function]}
              selected={false}
            >
              おすすめ写真スポット
            </RoundButton>
            <RoundButton
              id="category-button-4"
              key="category-button-4"
              onClick={[Function]}
              selected={false}
            >
              ショーパレ
            </RoundButton>
            <RoundButton
              id="category-button-5"
              key="category-button-5"
              onClick={[Function]}
              selected={false}
            >
              キャラグリ
            </RoundButton>
            <RoundButton
              id="category-button-6"
              key="category-button-6"
              onClick={[Function]}
              selected={false}
            >
              パーク攻略法
            </RoundButton>
            <RoundButton
              id="category-button-0"
              key="category-button-0"
              onClick={[Function]}
              selected={false}
            >
              その他
            </RoundButton>
          </ForwardRef(Stack)>
          <ForwardRef(Box)
            onClick={[Function]}
            sx={
              Object {
                "alignItems": "center",
                "color": "#eeeeee",
                "display": "flex",
                "justifyContent": "center",
                "width": "30px",
              }
            }
          >
            <Memo(ForwardRef(ArrowForwardIosIcon)) />
          </ForwardRef(Box)>
        </ForwardRef(Box)>
      </ForwardRef(Box)>
    </GlobalMenu>
    <ForwardRef(Drawer)
      anchor="right"
      open={true}
      sx={
        Object {
          "& .MuiDrawer-paper": Object {
            "width": 500,
          },
          "flexShrink": 0,
          "width": 500,
        }
      }
      variant="persistent"
    >
      <ArticleForm
        onClickSelectPosition={[Function]}
        onClose={[Function]}
        park="S"
      />
    </ForwardRef(Drawer)>
    <GlobalMessage
      closeFormModal={[Function]}
    />
    <ForwardRef(Dialog)
      onClose={[Function]}
      open={false}
    >
      <ForwardRef(DialogTitle)>
        入力内容の変更が保存されていません。
      </ForwardRef(DialogTitle)>
      <ForwardRef(DialogContent)>
        <ForwardRef(DialogContentText)>
          現在編集中の投稿を「下書き保存」、「保存して公開」、または「編集を破棄」してからもう一度お試しください。
        </ForwardRef(DialogContentText)>
      </ForwardRef(DialogContent)>
      <ForwardRef(DialogActions)>
        <ForwardRef(Button)
          onClick={[Function]}
          variant="outlined"
        >
          閉じる
        </ForwardRef(Button)>
      </ForwardRef(DialogActions)>
    </ForwardRef(Dialog)>
  </ForwardRef(Box)>
</Fragment>
`;
